Task1: To ensure that only one philosopher can grab a fork at any given moment we used a binary mutex to wrap the section where they acquire a fork. This guarantees no philosophers can grab the same fork (deadlock) because the mutex prevents them from attempting to grab the fork at the same time.

Task2: We used a Pthread condition variable and waited if 4 philosophers were eating. We did this using a global count variable and waited the condition variable or incremented the count. After a philosopher was done eating we decremented the count, thus allowing any waiting philosophers to eat. You will notice the condition wait is inside a while loop checking if the count is equal to 4. This ensures that if the operating system wakes up the process too early it will go back to sleep.
